@Description
Тест по Java. Средний уровень уровень https://geekbrains.ru/tests/55

@Question
Оператор join() предназначен для
@Options @OnlyOne @Key=3
объединения нескольких потоков в один
объединения нескольких потоков для их одновременной работы
перевода одного потока в режим ожидания завершения другого потока
обмена данными между потоками

@Question
Можно ли перехватить OutOfMemoryError с помощью блока try-catch?
@Options @OnlyOne @Key=1
нет
да

@Question
Какой из вариантов создания объекта недопустим?
@Options @OnlyOne @Key=3
Map<String, Integer> map = new HashMap<>();
HashMap<String, Integer> map = new LinkedHashMap<>();
Collection<String, Integer> map = new HashMap<>();
NavigableMap<String, Integer> map = new TreeMap<>();

@Question
Можно ли запустить поток через объект тип Thread повторно, после его завершения?
@Options @OnlyOne @Key=1 <?>
да
нет

@Question
Какой из методов не может привести к приостановке потока?
@Options @OnlyOne @Key=1
notify()
wait()
join()
sleep()

@Question
Объекты какого класса являются иммунабельными?
@Options @OnlyOne @Key=4
StringBulder
StringBuffer
ни один из вариантов
String

@Question
Можно ли блок try-with-resources подключить блок finally?
@Options @OnlyOne @Key=1
да
нет

@Question
Можно ли после запуска потока сделать его daemon-потоком?
@Options @OnlyOne @Key=2 <?>
да
нет

@Question
Подклассом класса RuntimeException является
@Options @OnlyOne @Key=4
IOException
Exception
FileNotFoundException
NullPointerException

@Question
Утверждение: статический внутренний (вложенный) класс имеет доступ только к статическим полям и методам внешнего класса
@Options @OnlyOne @Key=2 <?>
не верно
верно

@Question
В чем особенность daemon-потока?
@Options @OnlyOne @Key=4 <?>
запускается при старте приложения
может быть перезапущен сколько угодно раз
не может быть остановлен
завершит свою работу по завершению работы всех обычных потоков

@Question
Запуск потоков возможен только из main-потока
@Options @OnlyOne @Key=1
да
нет

@Question
Выберите верное утверждение
<pre><code>
public static void main(String[] args){
    new Thread(new Runnable() {
        @Override
        public void run(){
            for(int i = 0; i < 5; i++) {
                try{
                    Thread.sleep(5);
                    System.out.print(1);
                } catch(InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }).start();
    new Thread(new Runnable() {
        @Override
        public void run(){
            for(int i = 0; i < 5; i++){
                try{
                    Thread.sleep(5);
                    System.out.print(2);
                } catch(InterruptedException e){
                    e.printStackTrace();
                }
            }
        }
    }).start();
}
</code></pre>
@Options @OnlyOne @Key=1
порядок вывода гарантировать нельзя
нельзя гарантировать с какой цифры начнётся вывод 1 или 2, но печать будет чередоваться 1212121212 или 2121212121
порядок печати всегда будет 1212121212
порядок печати всегда будет 2121212121

@Question
Выберите неверное утверждение
@Options @OnlyOne @Key=2
все утверждения верны
List, Map, Set являются абстрактными классами
List, Map, Set являются интерфейсами
Классы коллекций находятся в пакете java.util

@Question
Выберите верное утверждение
@Options @OnlyOne @Key=2
ArrayList и Vector синхронизированы
ArrayList - не синхронизирован, Vector - синхронизирован
ArrayList - синхронизирован, Vector - не синхронизирован 
ArrayList и Vector не синхронизированы 

@Question
При создании объекта типа ArrayList в конструктор в качестве параметра нельзя передать
@Options @OnlyOne @Key=4
массив элементов
объект типа List
объект типа Collection
int

@Question
Может ли HashMap хранить несколько записей с одинаковым ключом?
@Options @OnlyOne @Key=1
нет, при добавлении записи с таким же ключом, старое значение будет перезаписано
да, при выполнении метода get() вернётся список значений, лежащих под указанным ключщь
нет, при добавлении записи с таким же ключом будет сгенерировано исключение

@Question
Выберите верное утверждение
@Options @OnlyOne @Key=1
если два объекта равны через equals() их hashCode() должен совпадать, если объекты не равны, их hashCode() может совпадать
если два объекта равны через equals() их hashCode() должен совпадать, если объекты не равны, их hashCode() не должен совпадать
если два объекта равны через equals() их hashCode() может не совпадать
если два объекта равны через equals() их hashCode() может совпадать

@Question
Параметр loadFactory у отображения HashMap по-умолчанию равен:
@Options @OnlyOne @Key=3
0.5
0.8
0.75
1.0

@Question
Что будет результатом работы предложенного кода?
<pre><code>
public static void main(String[] args){
    Thread t1 = new Thread(new Runnable()){
        @Override
        public void run(){
            System.out.println(1);
        }
    });
    Thread t = new Thread(t1);
    t.start();
}
</code></pre>
@Options @OnlyOne @Key=3
ошибка компиляции, невозможно в конструктор одного потока подать другой поток
будет сгенерировано исключение RuntimeException
в консоль будет выведено число 1
в консоль ничего не будет выведено

@Question
Укажите суперкласс для классов Exception и Error?
@Options @OnlyOne @Key=3
Catched
Errors
Throwable
Checked

@Question
Для создания класса checked исключения необходимо
@Options @OnlyOne @Key=4
указать ключевое слово checked в объявлении класса
унаследовать его только от класса Exception
унаследовать его от класса RuntimeException
унаследовать его от класса checked исключения

@Question
Выберите неверное утверждение
@Options @OnlyOne @Key=3
интерфейс Set не наследуется от интерфейса Collection
интерфейс List не наследуется от интерфейса Collection
интерфейс Map наследуется от интерфейса Collection

@Question
Какой пакет импортирован по умолчанию?
@Options @OnlyOne @Key=2
java.util
java.lang
java.core
java.io
java.text

@Question
Утверждение: статический внутренний (вложенный) класс имеет доступ только к статическим полям и методам внешнего класса
@Options @OnlyOne @Key=2
верно
не верно

@Question
Какой метод нужно выполнить у класса Thread для запуска нового потока?
@Options @OnlyOne @Key=1
start()
run()
execute()
submit()

@Question
Допустимо объявление пустых интерфейсов?
@Options @OnlyOne @Key=2
нет
да

@Question
Что будет результатом работы предложенного кода?
<pre><code>
public static void main(String[] args){
    Thread t1 = new Thread(new Runnable() {
        @Override
        public void run() {
            System.out.println(1);
        }
    });
    Thread t2 = new Thread(new Runnable() {
        @Override
        public void run() {
            try {
                t1.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(2);
        }
    });
    t1.start();
    t2.start();
}
</code></pre>
@Options @OnlyOne @Key=1
в консоль гарантировано будет выведено 12
один поток созданный с помощью анонимного класса, не может ожидать другой поток
1 и 2 может быть выведено в любом порядке
в консоль гарантировано будет выведено 21

@Question
Выберите верное утверждение о ключевом слове final
@Options @OnlyOne @Key=1
нельзя объявить абстрактный класс с модификаторами final
можно переопределить методы с модификатором final
абстрактный класс может быть объявлен с модификатором final
можно менять значение final поля

@Question
Утверждение: внешний класс имеет доступ ко всем полям и методам внутреннего класса
@Options @OnlyOne @Key=1
верно
не верно